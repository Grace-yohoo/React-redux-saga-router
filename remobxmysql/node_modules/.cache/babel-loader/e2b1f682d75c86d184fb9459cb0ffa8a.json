{"ast":null,"code":"import _defineProperty from \"/home/grace/test/my-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"/home/grace/test/my-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nvar _jsxFileName = \"/home/grace/test/my-app/src/components/Form/editablecell.js\",\n    _dec,\n    _class;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { Button, Modal, Table, Input, InputNumber, Popconfirm, Form, Spin } from 'antd';\nimport React from 'react';\nimport 'antd/dist/antd.css';\nimport SearchSet from '../Search/Search';\nimport CollectionCreateForm from '../AddColumns/addcol';\nimport { observer, inject } from 'mobx-react';\nlet data = null;\nconst EditableContext = React.createContext();\n\nclass EditableCell extends React.Component {\n  constructor(...args) {\n    var _temp;\n\n    return _temp = super(...args), this.getInput = () => {\n      if (this.props.inputType === 'number') {\n        return React.createElement(InputNumber, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 16\n          },\n          __self: this\n        });\n      }\n\n      return React.createElement(Input, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 18\n        },\n        __self: this\n      });\n    }, this.renderCell = ({\n      getFieldDecorator\n    }) => {\n      const _this$props = this.props,\n            editing = _this$props.editing,\n            dataIndex = _this$props.dataIndex,\n            title = _this$props.title,\n            inputType = _this$props.inputType,\n            record = _this$props.record,\n            index = _this$props.index,\n            children = _this$props.children,\n            restProps = _objectWithoutProperties(_this$props, [\"editing\", \"dataIndex\", \"title\", \"inputType\", \"record\", \"index\", \"children\"]);\n\n      return React.createElement(\"td\", Object.assign({}, restProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      }), editing ? React.createElement(Form.Item, {\n        style: {\n          margin: 0\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }, getFieldDecorator(dataIndex, {\n        rules: [{\n          required: true,\n          message: \"Please Input \".concat(title, \"!\")\n        }],\n        initialValue: record[dataIndex]\n      })(this.getInput())) : children);\n    }, _temp;\n  }\n\n  render() {\n    return React.createElement(EditableContext.Consumer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, this.renderCell);\n  }\n\n} //可编辑表格 父组件\n\n\nlet EditableTable = (_dec = inject('store'), _dec(_class = observer(_class = class EditableTable extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.showModal = () => {\n      this.setState({\n        visible: true\n      });\n    };\n\n    this.handleCancel = () => {\n      this.setState({\n        visible: false\n      });\n    };\n\n    this.handleCreate = () => {\n      const data = this.state.data;\n      const form = this.formRef.props.form;\n      form.validateFields((err, values) => {\n        if (err) {\n          return;\n        }\n\n        let time = new Date();\n        let time2 = new Date().valueOf();\n\n        function formatDate(now) {\n          var year = now.getFullYear();\n          var month = now.getMonth() + 1;\n          var date = now.getDate();\n          var hour = now.getHours();\n          var minute = now.getMinutes();\n          var second = now.getSeconds();\n          return year + \"-\" + month + \"-\" + date + \" \" + hour + \":\" + minute + \":\" + second;\n        }\n\n        var d = formatDate(time);\n        values.key = time2;\n        values.createdAt = d;\n        console.log('Received values of form: ', values);\n        data.push(values);\n        this.setState({\n          data: data\n        });\n        form.resetFields();\n        this.setState({\n          visible: false\n        });\n      });\n    };\n\n    this.handleDelete = key => {\n      const data = [...this.props.store.home.data];\n      this.setState({\n        data: this.props.store.home.data.filter(item => item.key !== key)\n      });\n    };\n\n    this.saveFormRef = formRef => {\n      this.formRef = formRef;\n    };\n\n    this.isEditing = record => record.key === this.state.editingKey;\n\n    this.cancel = () => {\n      this.setState({\n        editingKey: ''\n      });\n    };\n\n    this.state = {\n      data,\n      editingKey: '',\n      visible: false,\n      searchText: '',\n      searchedColumn: '',\n      dataSearch: null\n    };\n    this.columns = [{\n      title: 'Name',\n      dataIndex: 'who',\n      editable: true\n    }, {\n      title: 'Description',\n      dataIndex: 'desc',\n      width: '30%',\n      editable: true,\n      ellipsis: true\n    }, {\n      title: 'Type',\n      dataIndex: 'type'\n    }, {\n      title: 'Link',\n      dataIndex: 'url',\n      editable: true,\n      render: text => React.createElement(\"a\", {\n        href: text,\n        target: \"_blank\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, \"\\u94FE\\u63A5\")\n    }, {\n      title: 'CreatedAt',\n      dataIndex: 'createdAt',\n      width: '15%'\n    }, {\n      title: 'Source',\n      dataIndex: 'source',\n      editable: true\n    }, {\n      title: 'Delete',\n      dataIndex: 'Delete',\n      render: (text, record) => this.props.store.home.data.length >= 1 ? React.createElement(Popconfirm, {\n        title: \"Sure to delete?\",\n        onConfirm: () => this.handleDelete(record.key),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, \"Delete\")) : null\n    }, {\n      title: 'Operation',\n      dataIndex: 'operation',\n      render: (text, record) => {\n        const editingKey = this.state.editingKey;\n        const editable = this.isEditing(record);\n        return editable ? React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 123\n          },\n          __self: this\n        }, React.createElement(EditableContext.Consumer, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 124\n          },\n          __self: this\n        }, form => React.createElement(\"a\", {\n          onClick: () => this.save(form, record.key),\n          style: {\n            marginRight: 8\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 126\n          },\n          __self: this\n        }, \"Save\")), React.createElement(Popconfirm, {\n          title: \"Sure to cancel?\",\n          onConfirm: () => this.cancel(record.key),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 134\n          },\n          __self: this\n        }, React.createElement(\"a\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 135\n          },\n          __self: this\n        }, \"Cancel\"))) : React.createElement(\"a\", {\n          disabled: editingKey !== '',\n          onClick: () => this.edit(record.key),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 139\n          },\n          __self: this\n        }, \"Edit\");\n      }\n    }];\n    this.handleSearch = this.handleSearch.bind(this);\n    this.handleReset = this.handleReset.bind(this);\n  }\n\n  // changeData(result){\n  //   let arr = []\n  //   let data2 = []\n  //   const data1 = result.results\n  //   for(let k in data1){\n  //       arr.push(data1[k])\n  //   }\n  //   let arr2 = [].concat.apply([], arr);\n  //   console.log(arr2)\n  //   for (let i = 0; i < arr2.length; i++) {\n  //       data2.push({\n  //           publishedAt:arr2[i].publishedAt,\n  //           type:arr2[i].type,\n  //           url:arr2[i].url,\t\n  //           who:arr2[i].who,\n  //           key: arr2[i]._id,\n  //           createdAt:arr2[i].createdAt,\n  //           desc:arr2[i].desc,\n  //           source:arr2[i].source,\n  //           used:true,\n  //       });\n  //  }\n  //   this.setState({\n  //     data : data2,\n  //     dataSearch: data2\n  //   })\n  // }\n  componentDidMount() {\n    const store = this.props.store;\n    const changeData = store.home.changeData;\n    fetch('http://gank.io/api/today').then(result => result.json()).then(result => changeData(result, this)); // .catch(e => this.setState({ error: e }))\n  }\n\n  onSearch(value) {\n    this.setState({\n      searchText: value\n    });\n    const searchText = this.state.searchText;\n    console.log(searchText); // const data = this.state.data.filter(searchText)\n\n    this.setState({\n      data: data\n    });\n  }\n\n  save(form, key) {\n    form.validateFields((error, row) => {\n      if (error) {\n        return;\n      }\n\n      const newData = [...this.state.data];\n      const index = newData.findIndex(item => key === item.key);\n\n      if (index > -1) {\n        const item = newData[index];\n        newData.splice(index, 1, _objectSpread({}, item, {}, row));\n        this.setState({\n          data: newData,\n          editingKey: ''\n        });\n      } else {\n        newData.push(row);\n        this.setState({\n          data: newData,\n          editingKey: ''\n        });\n      }\n    });\n  }\n\n  edit(key) {\n    this.setState({\n      editingKey: key\n    });\n  } //还原筛选前的数据\n\n\n  handleReset() {\n    const dataSearch = this.state.dataSearch;\n    this.setState({\n      data: dataSearch\n    });\n  } //筛选数据\n\n\n  handleSearch(values) {\n    console.log(values);\n    let arr6 = [];\n    const data = this.state.data;\n\n    for (let k in data) {\n      if (data[k].who.search(values) >= 0) {\n        arr6.push({\n          createdAt: data[k].createdAt,\n          desc: data[k].desc,\n          key: data[k].key,\n          publishedAt: data[k].publishedAt,\n          source: data[k].source,\n          type: data[k].type,\n          url: data[k].url,\n          who: data[k].who\n        });\n      }\n    }\n\n    this.setState({\n      data: arr6\n    });\n  }\n\n  render() {\n    const components = {\n      body: {\n        cell: EditableCell\n      }\n    };\n    const columns = this.columns.map(col => {\n      if (!col.editable) {\n        return col;\n      }\n\n      return _objectSpread({}, col, {\n        onCell: record => ({\n          record,\n          inputType: col.dataIndex === 'age' ? 'number' : 'text',\n          dataIndex: col.dataIndex,\n          title: col.title,\n          editing: this.isEditing(record)\n        })\n      });\n    });\n    const store = this.props.store;\n    const data = store.home.data;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 332\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333\n      },\n      __self: this\n    }, React.createElement(SearchSet, {\n      handleSearch: this.handleSearch,\n      handleReset: this.handleReset,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 334\n      },\n      __self: this\n    }), React.createElement(Button, {\n      type: \"primary\",\n      onClick: this.showModal,\n      style: {\n        margin: 20\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 335\n      },\n      __self: this\n    }, \"Add a row\"), React.createElement(CollectionCreateForm, {\n      wrappedComponentRef: this.saveFormRef,\n      visible: this.state.visible,\n      onCancel: this.handleCancel,\n      onCreate: this.handleCreate,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 338\n      },\n      __self: this\n    }), React.createElement(EditableContext.Provider, {\n      value: this.props.form,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 344\n      },\n      __self: this\n    }, React.createElement(Table, {\n      style: {\n        margin: 20\n      },\n      components: components,\n      bordered: true,\n      dataSource: data,\n      columns: columns,\n      rowClassName: \"editable-row\",\n      pagination: {\n        onChange: this.cancel\n      },\n      rowKey: data => data.key,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 345\n      },\n      __self: this\n    }))));\n  }\n\n}) || _class) || _class);\nconst EditableFormTable = Form.create()(EditableTable); //导出的组件\n\nclass Editable extends React.Component {\n  render() {\n    return React.createElement(EditableFormTable, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 369\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default Editable;","map":{"version":3,"sources":["/home/grace/test/my-app/src/components/Form/editablecell.js"],"names":["Button","Modal","Table","Input","InputNumber","Popconfirm","Form","Spin","React","SearchSet","CollectionCreateForm","observer","inject","data","EditableContext","createContext","EditableCell","Component","getInput","props","inputType","renderCell","getFieldDecorator","editing","dataIndex","title","record","index","children","restProps","margin","rules","required","message","initialValue","render","EditableTable","constructor","showModal","setState","visible","handleCancel","handleCreate","state","form","formRef","validateFields","err","values","time","Date","time2","valueOf","formatDate","now","year","getFullYear","month","getMonth","date","getDate","hour","getHours","minute","getMinutes","second","getSeconds","d","key","createdAt","console","log","push","resetFields","handleDelete","store","home","filter","item","saveFormRef","isEditing","editingKey","cancel","searchText","searchedColumn","dataSearch","columns","editable","width","ellipsis","text","length","save","marginRight","edit","handleSearch","bind","handleReset","componentDidMount","changeData","fetch","then","result","json","onSearch","value","error","row","newData","findIndex","splice","arr6","k","who","search","desc","publishedAt","source","type","url","components","body","cell","map","col","onCell","onChange","EditableFormTable","create","Editable"],"mappings":"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","sourcesContent":["import { Button, Modal,  Table, Input, InputNumber, Popconfirm, Form, Spin} from 'antd';\nimport React from 'react';\nimport 'antd/dist/antd.css';\nimport SearchSet from '../Search/Search'\nimport CollectionCreateForm from '../AddColumns/addcol'\nimport {observer, inject} from 'mobx-react'\n\nlet data = null;\n\n\nconst EditableContext = React.createContext();\n\nclass EditableCell extends React.Component {\n  getInput = () => {\n    if (this.props.inputType === 'number') {\n      return <InputNumber />;\n    }\n    return <Input />;\n  };\n\n  renderCell = ({ getFieldDecorator }) => {\n    const {\n      editing,\n      dataIndex,\n      title,    \n      inputType,\n      record,\n      index,\n      children,\n      ...restProps\n    } = this.props;\n    return (\n      <td {...restProps}>\n        {editing ? (\n          <Form.Item style={{ margin: 0 }}>\n            {getFieldDecorator(dataIndex, {\n              rules: [\n                {\n                  required: true,\n                  message: `Please Input ${title}!`,\n                },\n              ],\n              initialValue: record[dataIndex],\n            })(this.getInput())}\n          </Form.Item>\n        ) : (\n          children\n        )}\n      </td>\n    );\n  };\n\n  render() {\n    return <EditableContext.Consumer>{this.renderCell}</EditableContext.Consumer>;\n  }\n}\n\n//可编辑表格 父组件\n@inject('store')\n@observer\nclass EditableTable extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data, editingKey: '',\n      visible: false, \n      searchText: '',\n      searchedColumn: '', \n      dataSearch:null,\n    };\n    this.columns = [\n      {\n        title: 'Name',\n        dataIndex: 'who',\n        editable: true,\n      },\n      {\n        title:'Description',\n        dataIndex:'desc',\n        width:'30%',\n        editable: true,\n        ellipsis: true,\n      },\n      {\n        title: 'Type',\n        dataIndex: 'type',\n      },\n      {\n        title:'Link',\n        dataIndex:'url',\n        editable: true,\n        render: text => <a href={text} target=\"_blank\">链接</a>,\n      },\n      {\n        title: 'CreatedAt',\n        dataIndex: 'createdAt',\n        width:'15%',\n      },\n      {\n        title: 'Source',\n        dataIndex: 'source',\n        editable: true,\n      },\n      {\n        title: 'Delete',\n        dataIndex: 'Delete',\n        render: (text, record) =>\n          this.props.store.home.data.length >= 1 ? (\n            <Popconfirm title=\"Sure to delete?\" onConfirm={() => this.handleDelete(record.key)}>\n              <a>Delete</a>\n            </Popconfirm>\n          ) : null,\n      },  \n      {\n        title: 'Operation',\n        dataIndex: 'operation',\n        render: (text, record) => {\n\n        const { editingKey } = this.state;\n\n          const editable = this.isEditing(record);\n          return editable ? (\n            <span>\n              <EditableContext.Consumer>\n                {form => (\n                  <a\n                    onClick={() => this.save(form, record.key)}\n                    style={{ marginRight: 8 }}\n                  >\n                    Save\n                  </a>\n                )}\n              </EditableContext.Consumer>\n              <Popconfirm title=\"Sure to cancel?\" onConfirm={() => this.cancel(record.key)}>\n                <a>Cancel</a>\n              </Popconfirm>\n            </span>\n          ) : (\n            <a disabled={editingKey !== ''} onClick={() => this.edit(record.key)}>\n              Edit\n            </a>\n          );\n        },\n      },\n    ];\n    this.handleSearch = this.handleSearch.bind(this)\n    this.handleReset = this.handleReset.bind(this)\n  }\n\n\n  showModal = () => {\n    this.setState({ visible: true });\n  };\n\n  handleCancel = () => {\n    this.setState({ visible: false });\n  };\n   \n  handleCreate = () => {\n    const {data} = this.state;\n    const { form } = this.formRef.props;\n    form.validateFields((err, values) => {\n      if (err) {\n        return;\n      }\n      let time = new Date();\n      let time2 = (new Date().valueOf())\n      function formatDate(now) { \n        var year=now.getFullYear(); \n        var month=now.getMonth()+1; \n        var date=now.getDate(); \n        var hour=now.getHours(); \n        var minute=now.getMinutes(); \n        var second=now.getSeconds(); \n        return year+\"-\"+month+\"-\"+date+\" \"+hour+\":\"+minute+\":\"+second; \n     } \n      var d =(formatDate(time))\n      values.key = time2\n      values.createdAt = d\n      console.log('Received values of form: ', values);\n      data.push(values)\n      this.setState({data: data})\n      form.resetFields();\n      this.setState({ visible: false });\n    });\n  };\n\n  handleDelete = key => {\n    const data= [...this.props.store.home.data];\n    this.setState({ data: this.props.store.home.data.filter(item => item.key !== key) });\n  };\n  saveFormRef = formRef => {\n    this.formRef = formRef;\n  };\n\n  // changeData(result){\n  //   let arr = []\n  //   let data2 = []\n  //   const data1 = result.results\n\n  //   for(let k in data1){\n  //       arr.push(data1[k])\n  //   }\n  //   let arr2 = [].concat.apply([], arr);\n  //   console.log(arr2)\n    \n  //   for (let i = 0; i < arr2.length; i++) {\n  //       data2.push({\n  //           publishedAt:arr2[i].publishedAt,\n  //           type:arr2[i].type,\n  //           url:arr2[i].url,\t\n  //           who:arr2[i].who,\n  //           key: arr2[i]._id,\n  //           createdAt:arr2[i].createdAt,\n  //           desc:arr2[i].desc,\n  //           source:arr2[i].source,\n\n\n  //           used:true,\n  //       });\n  //  }\n \n  //   this.setState({\n  //     data : data2,\n  //     dataSearch: data2\n  //   })\n  // }\n  \n  componentDidMount(){\n  const {store} = this.props;\n  const {home:{changeData}} = store;\n  fetch('http://gank.io/api/today')\n    .then(result => result.json())\n    .then(result => changeData(result,this))\n    // .catch(e => this.setState({ error: e }))\n  }\n\n  onSearch(value){\n    this.setState({searchText:value})\n    const { searchText } = this.state\n    console.log(searchText)\n    // const data = this.state.data.filter(searchText)\n    this.setState({data :data })\n  }\n  \n  isEditing = record => record.key === this.state.editingKey;\n\n  cancel = () => {\n    this.setState({ editingKey: '' });\n  };\n\n  save(form, key) {\n    form.validateFields((error, row) => {\n      if (error) {\n        return;\n      }\n      const newData = [...this.state.data];\n      const index = newData.findIndex(item => key === item.key);\n      if (index > -1) {\n        const item = newData[index];\n        newData.splice(index, 1, {\n          ...item,\n          ...row,\n        });\n        this.setState({ data: newData, editingKey: '' });\n      } else {\n        newData.push(row);\n        this.setState({ data: newData, editingKey: '' });\n      }\n    });\n  }\n\n  edit(key) {\n    this.setState({ editingKey: key });\n  }\n //还原筛选前的数据\n handleReset(){\n   const {dataSearch} = this.state\n   this.setState({data:dataSearch,\n  })\n }\n //筛选数据\n  handleSearch(values){\n    console.log(values);\n    let arr6 = []\n    const {data} = this.state\n    for (let k in data){\n      if (data[k].who.search(values)>=0){\n        arr6.push({\n          createdAt: data[k].createdAt,\n          desc: data[k].desc,\n          key: data[k].key,\n          publishedAt: data[k].publishedAt,\n          source: data[k].source,\n          type: data[k].type,\n          url: data[k].url,\n          who: data[k].who,\n        })\n      }\n    }\n     this.setState({\n       data:arr6,\n    })\n};\n\n\n  render() {\n    const components = {\n      body: {\n        cell: EditableCell,\n      },\n    };\n\n    const columns = this.columns.map(col => {\n      if (!col.editable) {\n        return col;\n      }\n      return {\n        ...col,\n        onCell: record => ({\n          record,\n          inputType: col.dataIndex === 'age' ? 'number' : 'text',\n          dataIndex: col.dataIndex,\n          title: col.title,\n          editing: this.isEditing(record),\n        }),\n      };\n    });\n    const {store} = this.props\n    const {home:{data}} = store\n    return (\n        <div>\n           <div>\n            <SearchSet handleSearch= {this.handleSearch} handleReset = {this.handleReset}/> \n            <Button  type=\"primary\" onClick={this.showModal} style={{margin:20}}>\n              Add a row\n            </Button>\n            <CollectionCreateForm\n                wrappedComponentRef={this.saveFormRef}\n                visible={this.state.visible}\n                onCancel={this.handleCancel}\n                onCreate={this.handleCreate}\n            />\n            <EditableContext.Provider value={this.props.form}>\n                <Table\n                style={{margin:20 }}\n                components={components}\n                bordered\n                dataSource={data}\n                columns={columns}\n                rowClassName=\"editable-row\"\n                pagination={{\n                onChange: this.cancel,\n                }}\n                rowKey= {data => data.key}\n                />\n            </EditableContext.Provider>\n      </div>\n    </div>\n    );\n  }\n}\n\nconst EditableFormTable = Form.create()(EditableTable);\n\n//导出的组件\nclass Editable extends React.Component {\n    render(){\n        return <EditableFormTable />\n    }\n\n}\n\nexport default Editable"]},"metadata":{},"sourceType":"module"}