{"ast":null,"code":"import _defineProperty from \"/home/grace/Desktop/app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { FETCH } from '../ActionTypes/tablelist';\nconst initialState = {\n  data: null,\n  dataSearch: null\n};\nexport const tablelistReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case FETCH:\n      let arr = [];\n      let data1 = res.results;\n\n      for (let key in data1) {\n        arr.push(data1[key]);\n      }\n\n      let arr1 = [].concat.apply([], arr);\n      let arr2 = [];\n\n      for (let i = 0; i < arr1.length; i++) {\n        arr2.push({\n          key: arr1[i]._id,\n          createdAt: arr1[i].createdAt,\n          desc: arr1[i].desc,\n          publishedAt: arr1[i].publishedAt,\n          who: arr1[i].who,\n          type: arr1[i].type,\n          url: arr1[i].url,\n          used: true\n        });\n      }\n\n      return _objectSpread({}, state, {\n        data: arr2,\n        dataSearch: arr2\n      });\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/home/grace/Desktop/app/src/Reducer/tablelist.js"],"names":["FETCH","initialState","data","dataSearch","tablelistReducer","state","action","type","arr","data1","res","results","key","push","arr1","concat","apply","arr2","i","length","_id","createdAt","desc","publishedAt","who","url","used"],"mappings":";;;;;;AAAA,SAAQA,KAAR,QAAoB,0BAApB;AAGA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,IAAI,EAAG,IADU;AAEjBC,EAAAA,UAAU,EAAE;AAFK,CAArB;AAOA,OAAO,MAAOC,gBAAgB,GAAG,CAACC,KAAK,GAAGJ,YAAT,EAAuBK,MAAvB,KAAmC;AAChE,UAAQA,MAAM,CAACC,IAAf;AACK,SAAKP,KAAL;AACG,UAAIQ,GAAG,GAAG,EAAV;AACA,UAAIC,KAAK,GAAGC,GAAG,CAACC,OAAhB;;AACA,WAAI,IAAIC,GAAR,IAAeH,KAAf,EAAqB;AACnBD,QAAAA,GAAG,CAACK,IAAJ,CAASJ,KAAK,CAACG,GAAD,CAAd;AACD;;AACD,UAAIE,IAAI,GAAG,GAAGC,MAAH,CAAUC,KAAV,CAAgB,EAAhB,EAAmBR,GAAnB,CAAX;AACA,UAAIS,IAAI,GAAG,EAAX;;AACA,WAAI,IAAIC,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACJ,IAAI,CAACK,MAApB,EAA4BD,CAAC,EAA7B,EAAgC;AAC9BD,QAAAA,IAAI,CAACJ,IAAL,CAAU;AACRD,UAAAA,GAAG,EAAEE,IAAI,CAACI,CAAD,CAAJ,CAAQE,GADL;AAERC,UAAAA,SAAS,EAAEP,IAAI,CAACI,CAAD,CAAJ,CAAQG,SAFX;AAGRC,UAAAA,IAAI,EAAER,IAAI,CAACI,CAAD,CAAJ,CAAQI,IAHN;AAIRC,UAAAA,WAAW,EAAET,IAAI,CAACI,CAAD,CAAJ,CAAQK,WAJb;AAKRC,UAAAA,GAAG,EAAEV,IAAI,CAACI,CAAD,CAAJ,CAAQM,GALL;AAMRjB,UAAAA,IAAI,EAAEO,IAAI,CAACI,CAAD,CAAJ,CAAQX,IANN;AAORkB,UAAAA,GAAG,EAAEX,IAAI,CAACI,CAAD,CAAJ,CAAQO,GAPL;AAQRC,UAAAA,IAAI,EAAE;AARE,SAAV;AAUD;;AACD,+BACOrB,KADP;AAEIH,QAAAA,IAAI,EAAGe,IAFX;AAGId,QAAAA,UAAU,EAAEc;AAHhB;;AAQH;AACI,aAAOZ,KAAP;AA9BT;AAgCH,CAjCM","sourcesContent":["import {FETCH} from '../ActionTypes/tablelist'\n\n\nconst initialState = {\n    data : null,\n    dataSearch :null\n};\n\n\n\nexport const  tablelistReducer = (state = initialState, action ) => {\n    switch (action.type) {\n         case FETCH:\n            let arr = [];\n            let data1 = res.results;\n            for(let key in data1){\n              arr.push(data1[key])\n            }\n            let arr1 = [].concat.apply([],arr);\n            let arr2 = [];\n            for(let i=0; i<arr1.length; i++){\n              arr2.push({\n                key: arr1[i]._id,\n                createdAt: arr1[i].createdAt,\n                desc: arr1[i].desc,\n                publishedAt: arr1[i].publishedAt,\n                who: arr1[i].who,\n                type: arr1[i].type,\n                url: arr1[i].url,\n                used: true,\n              });\n            }\n            return {\n                ...state,\n                data : arr2,\n                dataSearch :arr2\n            }\n\n             \n     \n         default:\n             return state;\n    }\n}"]},"metadata":{},"sourceType":"module"}