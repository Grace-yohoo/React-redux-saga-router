{"ast":null,"code":"import _defineProperty from \"/home/grace/test/my-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"/home/grace/test/my-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nvar _dec,\n    _class,\n    _jsxFileName = \"/home/grace/test/my-app/src/components/Edit/edit.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { Table, Input, InputNumber, Popconfirm, Form } from 'antd';\nimport { REFUSED } from 'dns';\nimport React from 'react';\nimport 'antd/dist/antd.css';\nimport Editable from '../Form/editablecell';\nimport { observer, inject } from 'mobx-react';\nconst data = [];\n\nfor (let i = 0; i < 100; i++) {\n  data.push({\n    key: i.toString(),\n    name: \"Edrward \".concat(i),\n    age: 32,\n    address: \"London Park no. \".concat(i)\n  });\n}\n\nconst EditableContext = React.createContext();\nlet EditableCell = (_dec = inject('store'), _dec(_class = observer(_class = class EditableCell extends React.Component {\n  constructor(...args) {\n    var _temp;\n\n    return _temp = super(...args), this.getInput = () => {\n      if (this.props.inputType === 'number') {\n        return React.createElement(InputNumber, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 24\n          },\n          __self: this\n        });\n      }\n\n      return React.createElement(Input, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26\n        },\n        __self: this\n      });\n    }, this.renderCell = ({\n      getFieldDecorator\n    }) => {\n      const _this$props = this.props,\n            editing = _this$props.editing,\n            dataIndex = _this$props.dataIndex,\n            title = _this$props.title,\n            inputType = _this$props.inputType,\n            record = _this$props.record,\n            index = _this$props.index,\n            children = _this$props.children,\n            restProps = _objectWithoutProperties(_this$props, [\"editing\", \"dataIndex\", \"title\", \"inputType\", \"record\", \"index\", \"children\"]);\n\n      return React.createElement(\"td\", Object.assign({}, restProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }), editing ? React.createElement(Form.Item, {\n        style: {\n          margin: 0\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, getFieldDecorator(dataIndex, {\n        rules: [{\n          required: true,\n          message: \"Please Input \".concat(title, \"!\")\n        }],\n        initialValue: record[dataIndex]\n      })(this.getInput())) : children);\n    }, _temp;\n  }\n\n  render() {\n    return React.createElement(EditableContext.Consumer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, this.renderCell);\n  }\n\n}) || _class) || _class);\n\nclass EditableTable extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.isEditing = record => record.key === this.state.editingKey;\n\n    this.cancel = () => {\n      this.setState({\n        editingKey: ''\n      });\n    };\n\n    this.state = {\n      data,\n      editingKey: ''\n    };\n    const handleDelete = this.props.store.home.handleDelete;\n    const _this$props$store$hom = this.props.store.home,\n          editingKey = _this$props$store$hom.editingKey,\n          isEditing = _this$props$store$hom.isEditing,\n          save = _this$props$store$hom.save,\n          cancel = _this$props$store$hom.cancel,\n          edit = _this$props$store$hom.edit;\n    this.columns = [{\n      title: 'name',\n      dataIndex: 'name',\n      width: '25%',\n      editable: true\n    }, {\n      title: 'age',\n      dataIndex: 'age',\n      width: '15%',\n      editable: true\n    }, {\n      title: 'address',\n      dataIndex: 'address',\n      width: '40%',\n      editable: true\n    }, {\n      title: 'operation',\n      dataIndex: 'operation',\n      render: (text, record) => {\n        const handleDelete = this.props.store.home.handleDelete;\n        const _this$props$store$hom2 = this.props.store.home,\n              editingKey = _this$props$store$hom2.editingKey,\n              isEditing = _this$props$store$hom2.isEditing,\n              save = _this$props$store$hom2.save,\n              cancel = _this$props$store$hom2.cancel,\n              edit = _this$props$store$hom2.edit;\n        const editable = isEditing(record);\n        return editable ? React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 98\n          },\n          __self: this\n        }, React.createElement(EditableContext.Consumer, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 99\n          },\n          __self: this\n        }, form => React.createElement(\"a\", {\n          onClick: () => save(form, record.key),\n          style: {\n            marginRight: 8\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 101\n          },\n          __self: this\n        }, \"Save\")), React.createElement(Popconfirm, {\n          title: \"Sure to cancel?\",\n          onConfirm: () => cancel(record.key),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 109\n          },\n          __self: this\n        }, React.createElement(\"a\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 110\n          },\n          __self: this\n        }, \"Cancel\"))) : React.createElement(\"a\", {\n          disabled: editingKey !== '',\n          onClick: () => edit(record.key),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 114\n          },\n          __self: this\n        }, \"Edit\");\n      }\n    }];\n  }\n\n  save(form, key) {\n    form.validateFields((error, row) => {\n      if (error) {\n        return;\n      }\n\n      const newData = [...this.state.data];\n      const index = newData.findIndex(item => key === item.key);\n\n      if (index > -1) {\n        const item = newData[index];\n        newData.splice(index, 1, _objectSpread({}, item, {}, row));\n        this.setState({\n          data: newData,\n          editingKey: ''\n        });\n      } else {\n        newData.push(row);\n        this.setState({\n          data: newData,\n          editingKey: ''\n        });\n      }\n    });\n  }\n\n  edit(key) {\n    this.setState({\n      editingKey: key\n    });\n  }\n\n  render() {\n    const components = {\n      body: {\n        cell: EditableCell\n      }\n    };\n    const columns = this.columns.map(col => {\n      if (!col.editable) {\n        return col;\n      }\n\n      return _objectSpread({}, col, {\n        onCell: record => ({\n          record,\n          inputType: col.dataIndex === 'age' ? 'number' : 'text',\n          dataIndex: col.dataIndex,\n          title: col.title,\n          editing: this.isEditing(record)\n        })\n      });\n    });\n    return React.createElement(EditableContext.Provider, {\n      value: this.props.form,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, React.createElement(Table, {\n      components: components,\n      bordered: true,\n      dataSource: this.state.data,\n      columns: columns,\n      rowClassName: \"editable-row\",\n      pagination: {\n        onChange: this.cancel\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst EditableFormTable = Form.create()(EditableTable);\n\nclass Edit extends React.Component {\n  render() {\n    return React.createElement(EditableFormTable, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default Edit;","map":{"version":3,"sources":["/home/grace/test/my-app/src/components/Edit/edit.js"],"names":["Table","Input","InputNumber","Popconfirm","Form","REFUSED","React","Editable","observer","inject","data","i","push","key","toString","name","age","address","EditableContext","createContext","EditableCell","Component","getInput","props","inputType","renderCell","getFieldDecorator","editing","dataIndex","title","record","index","children","restProps","margin","rules","required","message","initialValue","render","EditableTable","constructor","isEditing","state","editingKey","cancel","setState","handleDelete","store","home","save","edit","columns","width","editable","text","form","marginRight","validateFields","error","row","newData","findIndex","item","splice","components","body","cell","map","col","onCell","onChange","EditableFormTable","create","Edit"],"mappings":"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","sourcesContent":["import { Table, Input, InputNumber, Popconfirm, Form } from 'antd';\nimport { REFUSED } from 'dns';\nimport React from 'react';\nimport 'antd/dist/antd.css';\nimport Editable from '../Form/editablecell';\nimport {observer,inject} from 'mobx-react'\n\nconst data = [];\nfor (let i = 0; i < 100; i++) {\n  data.push({\n    key: i.toString(),\n    name: `Edrward ${i}`,\n    age: 32,\n    address: `London Park no. ${i}`,\n  });\n}\nconst EditableContext = React.createContext();\n\n@inject('store')\n@observer\nclass EditableCell extends React.Component {\n  getInput = () => {\n    if (this.props.inputType === 'number') {\n      return <InputNumber />;\n    }\n    return <Input />;\n  };\n\n  renderCell = ({ getFieldDecorator }) => {\n    const {\n      editing,\n      dataIndex,\n      title,\n      inputType,\n      record,\n      index,\n      children,\n      ...restProps\n    } = this.props;\n    return (\n      <td {...restProps}>\n        {editing ? (\n          <Form.Item style={{ margin: 0 }}>\n            {getFieldDecorator(dataIndex, {\n              rules: [\n                {\n                  required: true,\n                  message: `Please Input ${title}!`,\n                },\n              ],\n              initialValue: record[dataIndex],\n            })(this.getInput())}\n          </Form.Item>\n        ) : (\n          children\n        )}\n      </td>\n    );\n  };\n\n  render() {\n    return <EditableContext.Consumer>{this.renderCell}</EditableContext.Consumer>;\n  }\n}   \nclass EditableTable extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { data, editingKey: '' };\n    const {home:{handleDelete}}= this.props.store;\n    const {home:{editingKey,isEditing,save,cancel,edit}} = this.props.store;\n    this.columns = [\n      {\n        title: 'name',\n        dataIndex: 'name',\n        width: '25%',\n        editable: true,\n      },\n      {\n        title: 'age',\n        dataIndex: 'age',\n        width: '15%',\n        editable: true,\n      },\n      {\n        title: 'address',\n        dataIndex: 'address',\n        width: '40%',\n        editable: true,\n      },\n      {\n        title: 'operation',\n        dataIndex: 'operation',\n        render: (text, record) => {\n            const {home:{handleDelete}}= this.props.store;\n            const {home:{editingKey,isEditing,save,cancel,edit}} = this.props.store;\n          const editable = isEditing(record);\n          return editable ? (\n            <span>\n              <EditableContext.Consumer>\n                {form => (\n                  <a\n                    onClick={() => save(form, record.key)}\n                    style={{ marginRight: 8 }}\n                  >\n                    Save\n                  </a>\n                )}\n              </EditableContext.Consumer>\n              <Popconfirm title=\"Sure to cancel?\" onConfirm={() => cancel(record.key)}>\n                <a>Cancel</a>\n              </Popconfirm>\n            </span>\n          ) : (\n            <a disabled={editingKey !== ''} onClick={() => edit(record.key)}>\n              Edit\n            </a>\n          );\n        },\n      },\n    ];\n  }\n\n  isEditing = record => record.key === this.state.editingKey;\n\n  cancel = () => {\n    this.setState({ editingKey: '' });\n  };\n\n  save(form, key) {\n    form.validateFields((error, row) => {\n      if (error) {\n        return;\n      }\n      const newData = [...this.state.data];\n      const index = newData.findIndex(item => key === item.key);\n      if (index > -1) {\n        const item = newData[index];\n        newData.splice(index, 1, {\n          ...item,\n          ...row,\n        });\n        this.setState({ data: newData, editingKey: '' });\n      } else {\n        newData.push(row);\n        this.setState({ data: newData, editingKey: '' });\n      }\n    });\n  }\n\n  edit(key) {\n    this.setState({ editingKey: key });\n  }\n\n  render() {\n    const components = {\n      body: {\n        cell: EditableCell,\n      },\n    };\n\n    const columns = this.columns.map(col => {\n      if (!col.editable) {\n        return col;\n      }\n      return {\n        ...col,\n        onCell: record => ({\n          record,\n          inputType: col.dataIndex === 'age' ? 'number' : 'text',\n          dataIndex: col.dataIndex,\n          title: col.title,\n          editing: this.isEditing(record),\n        }),\n      };\n    });\n\n    return (\n      <EditableContext.Provider value={this.props.form}>\n        <Table\n          components={components}\n          bordered\n          dataSource={this.state.data}\n          columns={columns}\n          rowClassName=\"editable-row\"\n          pagination={{\n            onChange: this.cancel,\n          }}\n        />\n      </EditableContext.Provider>\n    );\n  }\n}\n\nconst EditableFormTable = Form.create()(EditableTable);\n\n\nclass Edit extends React.Component {\n    render(){\n        return <EditableFormTable />\n    }\n}\n\nexport default Edit\n\n\n\n"]},"metadata":{},"sourceType":"module"}