{"ast":null,"code":"import { put, takeEvery } from 'redux-saga/effects'; //put 与actiontype相同\n//Mysql 请求数据\n\nfunction* fetchUser() {\n  const res = yield fetch('http://localhost:8080/');\n  const response = yield res.json();\n\n  for (let k in response) {\n    response[k].key = response[k].createdAt;\n  }\n\n  yield put({\n    type: \"fetch\",\n    payload: response\n  });\n} //MYSQL 删除\n\n\nfunction* mysqlDelfectch(key) {\n  const createdAt = yield key.key;\n  const res = yield fetch('http://localhost:8080/delete', {\n    method: 'POST',\n    body: JSON.stringify(createdAt),\n    headers: new Headers({\n      'Content-Type': 'application/x-www-form-urlencoded'\n    })\n  });\n  const res1 = yield res.json; // const response = yield fetchUser()\n  //重新请求数据\n\n  const res2 = yield fetch('http://localhost:8080/');\n  const response = yield res2.json();\n\n  for (let k in response) {\n    response[k].key = response[k].createdAt;\n  }\n\n  yield put({\n    type: \"delete\",\n    payload: response\n  });\n} //MYSQL 添加\n\n\nfunction* mysqlAddFetch(data) {\n  yield console.log(data);\n  yield fetch('http://localhost:8080/add', {\n    method: 'POST',\n    // or 'PUT'\n    body: JSON.stringify(data),\n    // data can be `string` or {object}!\n    headers: new Headers({\n      'Content-Type': 'application/x-www-form-urlencoded'\n    })\n  }); //重新请求数据\n\n  const res = yield fetch('http://localhost:8080/');\n  const response = yield res.json();\n\n  for (let k in response) {\n    response[k].key = response[k].createdAt;\n  }\n\n  yield put({\n    type: 'create',\n    payload: response\n  });\n} //监听与组件type相同\n\n\nfunction* mySaga() {\n  yield takeEvery(\"feh\", fetchUser);\n  yield takeEvery('del', mysqlDelfectch);\n  yield takeEvery('add', mysqlAddFetch);\n}\n\nexport default mySaga;","map":{"version":3,"sources":["/home/grace/test/redux/src/saga/index.js"],"names":["put","takeEvery","fetchUser","res","fetch","response","json","k","key","createdAt","type","payload","mysqlDelfectch","method","body","JSON","stringify","headers","Headers","res1","res2","mysqlAddFetch","data","console","log","mySaga"],"mappings":"AACA,SAASA,GAAT,EAAcC,SAAd,QAA+B,oBAA/B,C,CAGA;AACA;;AACA,UAAUC,SAAV,GAAsB;AACf,QAAMC,GAAG,GAAI,MAAMC,KAAK,CAAC,wBAAD,CAAxB;AAEA,QAAMC,QAAQ,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAvB;;AACA,OAAK,IAAIC,CAAT,IAAcF,QAAd,EAAuB;AACtBA,IAAAA,QAAQ,CAACE,CAAD,CAAR,CAAYC,GAAZ,GAAkBH,QAAQ,CAACE,CAAD,CAAR,CAAYE,SAA9B;AACA;;AAED,QAAMT,GAAG,CAAC;AAACU,IAAAA,IAAI,EAAE,OAAP;AAAgBC,IAAAA,OAAO,EAACN;AAAxB,GAAD,CAAT;AAEN,C,CAGD;;;AACA,UAAUO,cAAV,CAAyBJ,GAAzB,EAA6B;AAC3B,QAAMC,SAAS,GAAG,MAAMD,GAAG,CAACA,GAA5B;AACA,QAAML,GAAG,GAAG,MAAMC,KAAK,CAAC,8BAAD,EAAgC;AACrDS,IAAAA,MAAM,EAAE,MAD6C;AAErDC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeP,SAAf,CAF+C;AAGrDQ,IAAAA,OAAO,EAAE,IAAIC,OAAJ,CAAY;AACnB,sBAAgB;AADG,KAAZ;AAH4C,GAAhC,CAAvB;AAOA,QAAMC,IAAI,GAAG,MAAMhB,GAAG,CAACG,IAAvB,CAT2B,CAU3B;AACA;;AACA,QAAMc,IAAI,GAAI,MAAMhB,KAAK,CAAC,wBAAD,CAAzB;AAEA,QAAMC,QAAQ,GAAG,MAAMe,IAAI,CAACd,IAAL,EAAvB;;AACA,OAAK,IAAIC,CAAT,IAAcF,QAAd,EAAuB;AACjBA,IAAAA,QAAQ,CAACE,CAAD,CAAR,CAAYC,GAAZ,GAAkBH,QAAQ,CAACE,CAAD,CAAR,CAAYE,SAA9B;AACL;;AAGD,QAAMT,GAAG,CAAC;AAACU,IAAAA,IAAI,EAAE,QAAP;AAAiBC,IAAAA,OAAO,EAACN;AAAzB,GAAD,CAAT;AACD,C,CAED;;;AACA,UAAUgB,aAAV,CAAwBC,IAAxB,EAA6B;AAE3B,QAAMC,OAAO,CAACC,GAAR,CAAYF,IAAZ,CAAN;AACA,QAAMlB,KAAK,CAAC,2BAAD,EAA8B;AACnCS,IAAAA,MAAM,EAAE,MAD2B;AACnB;AAChBC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeM,IAAf,CAF6B;AAEP;AAC5BL,IAAAA,OAAO,EAAE,IAAIC,OAAJ,CAAY;AACnB,sBAAgB;AADG,KAAZ;AAH0B,GAA9B,CAAX,CAH2B,CAY3B;;AACA,QAAMf,GAAG,GAAI,MAAMC,KAAK,CAAC,wBAAD,CAAxB;AAEA,QAAMC,QAAQ,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAvB;;AACA,OAAK,IAAIC,CAAT,IAAcF,QAAd,EAAuB;AACjBA,IAAAA,QAAQ,CAACE,CAAD,CAAR,CAAYC,GAAZ,GAAkBH,QAAQ,CAACE,CAAD,CAAR,CAAYE,SAA9B;AACL;;AAGD,QAAMT,GAAG,CAAE;AAACU,IAAAA,IAAI,EAAC,QAAN;AAAgBC,IAAAA,OAAO,EAACN;AAAxB,GAAF,CAAT;AAED,C,CAGD;;;AACC,UAAUoB,MAAV,GAAmB;AACjB,QAAMxB,SAAS,CAAC,KAAD,EAAQC,SAAR,CAAf;AACA,QAAMD,SAAS,CAAC,KAAD,EAAQW,cAAR,CAAf;AACA,QAAMX,SAAS,CAAC,KAAD,EAAQoB,aAAR,CAAf;AAGD;;AAGD,eAAeI,MAAf","sourcesContent":["\nimport { put, takeEvery } from 'redux-saga/effects'\n\n\n//put 与actiontype相同\n//Mysql 请求数据\nfunction* fetchUser() {\n       const res =  yield fetch('http://localhost:8080/')\n\n       const response = yield res.json()\n       for (let k in response){\n        response[k].key = response[k].createdAt\n       }\n      \n       yield put({type: \"fetch\", payload:response});\n    \n}\n\n\n//MYSQL 删除\nfunction* mysqlDelfectch(key){\n  const createdAt = yield key.key\n  const res = yield fetch('http://localhost:8080/delete',{\n    method: 'POST', \n    body: JSON.stringify(createdAt),\n    headers: new Headers({\n      'Content-Type': 'application/x-www-form-urlencoded'\n    })\n  })\n  const res1 = yield res.json\n  // const response = yield fetchUser()\n  //重新请求数据\n  const res2 =  yield fetch('http://localhost:8080/')\n\n  const response = yield res2.json()\n  for (let k in response){\n        response[k].key = response[k].createdAt\n  }\n\n\n  yield put({type: \"delete\", payload:response});\n}\n\n//MYSQL 添加\nfunction* mysqlAddFetch(data){\n\n  yield console.log(data)\n  yield fetch('http://localhost:8080/add', {\n        method: 'POST', // or 'PUT'\n        body: JSON.stringify(data), // data can be `string` or {object}!\n        headers: new Headers({\n          'Content-Type': 'application/x-www-form-urlencoded'\n        })\n\n  })\n\n  //重新请求数据\n  const res =  yield fetch('http://localhost:8080/')\n\n  const response = yield res.json()\n  for (let k in response){\n        response[k].key = response[k].createdAt\n  }\n\n\n  yield put ({type:'create' ,payload:response})\n\n}\n\n\n//监听与组件type相同\n function* mySaga() {\n   yield takeEvery(\"feh\", fetchUser);\n   yield takeEvery('del', mysqlDelfectch)\n   yield takeEvery('add', mysqlAddFetch)\n\n\n }\n\n \n export default mySaga;\n\n"]},"metadata":{},"sourceType":"module"}