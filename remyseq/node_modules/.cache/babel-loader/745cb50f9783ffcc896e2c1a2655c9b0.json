{"ast":null,"code":"import _defineProperty from \"/home/grace/test/my-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"/home/grace/test/my-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/home/grace/test/my-app/src/table.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport 'antd/dist/antd.css';\nimport { Spin } from 'antd';\nimport { Table, Input, Button, Popconfirm, Form, Icon } from 'antd';\nimport Highlighter from \"react-highlight-words\";\nconst EditableContext = React.createContext();\n\nconst EditableRow = (_ref) => {\n  let form = _ref.form,\n      index = _ref.index,\n      props = _objectWithoutProperties(_ref, [\"form\", \"index\"]);\n\n  return React.createElement(EditableContext.Provider, {\n    value: form,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11\n    },\n    __self: this\n  }, React.createElement(\"tr\", Object.assign({}, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12\n    },\n    __self: this\n  })));\n};\n\nconst EditableFormRow = Form.create()(EditableRow);\n\nclass EditableCell extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      editing: false\n    };\n\n    this.toggleEdit = () => {\n      const editing = !this.state.editing;\n      this.setState({\n        editing\n      }, () => {\n        if (editing) {\n          this.input.focus();\n        }\n      });\n    };\n\n    this.save = e => {\n      const _this$props = this.props,\n            record = _this$props.record,\n            handleSave = _this$props.handleSave;\n      this.form.validateFields((error, values) => {\n        if (error && error[e.currentTarget.id]) {\n          return;\n        }\n\n        this.toggleEdit();\n        handleSave(_objectSpread({}, record, {}, values));\n      });\n    };\n\n    this.renderCell = form => {\n      this.form = form;\n      const _this$props2 = this.props,\n            children = _this$props2.children,\n            dataIndex = _this$props2.dataIndex,\n            record = _this$props2.record,\n            title = _this$props2.title;\n      const editing = this.state.editing;\n      return editing ? React.createElement(Form.Item, {\n        style: {\n          margin: 0\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, form.getFieldDecorator(dataIndex, {\n        rules: [{\n          required: true,\n          message: \"\".concat(title, \" is required.\")\n        }],\n        initialValue: record[dataIndex]\n      })(React.createElement(Input, {\n        ref: node => this.input = node,\n        onPressEnter: this.save,\n        onBlur: this.save,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }))) : React.createElement(\"div\", {\n        className: \"editable-cell-value-wrap\",\n        style: {\n          paddingRight: 24\n        },\n        onClick: this.toggleEdit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, children);\n    };\n  }\n\n  render() {\n    const _this$props3 = this.props,\n          editable = _this$props3.editable,\n          dataIndex = _this$props3.dataIndex,\n          title = _this$props3.title,\n          record = _this$props3.record,\n          index = _this$props3.index,\n          handleSave = _this$props3.handleSave,\n          children = _this$props3.children,\n          restProps = _objectWithoutProperties(_this$props3, [\"editable\", \"dataIndex\", \"title\", \"record\", \"index\", \"handleSave\", \"children\"]);\n\n    return React.createElement(\"td\", Object.assign({}, restProps, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }), editable ? React.createElement(EditableContext.Consumer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, this.renderCell) : children);\n  }\n\n}\n\nclass EditableTable extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleDelete = _id => {\n      const dataSource = [...this.state.dataSource];\n      this.setState({\n        dataSource: dataSource.filter(item => item._id !== _id)\n      });\n    };\n\n    this.handleAdd = () => {\n      const _this$state = this.state,\n            count = _this$state.count,\n            dataSource = _this$state.dataSource;\n      const timestamp = new Date().valueOf();\n      const newData = {\n        key: count,\n        _id: timestamp,\n        who: \"defaultName \".concat(count),\n        desc: 'defaultDesc',\n        type: \"defalutType \".concat(count),\n        url: 'defaultUrl',\n        source: 'defaultSource'\n      };\n      this.setState({\n        dataSource: [...dataSource, newData],\n        count: count + 1\n      });\n    };\n\n    this.handleSave = row => {\n      const newData = [...this.state.dataSource];\n      const index = newData.findIndex(item => row.key === item.key);\n      const item = newData[index];\n      newData.splice(index, 1, _objectSpread({}, item, {}, row));\n      this.setState({\n        dataSource: newData\n      });\n    };\n\n    this.getColumnSearchProps = dataIndex => ({\n      filterDropdown: ({\n        setSelectedKeys,\n        selectedKeys,\n        confirm,\n        clearFilters\n      }) => React.createElement(\"div\", {\n        style: {\n          padding: 8\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      }, React.createElement(Input, {\n        ref: node => {\n          this.searchInput = node;\n        },\n        placeholder: \"Search \".concat(dataIndex),\n        value: selectedKeys[0],\n        onChange: e => setSelectedKeys(e.target.value ? [e.target.value] : []),\n        onPressEnter: () => this.handleSearch(selectedKeys, confirm, dataIndex),\n        style: {\n          width: 188,\n          marginBottom: 8,\n          display: 'block'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200\n        },\n        __self: this\n      }), React.createElement(Button, {\n        type: \"primary\",\n        onClick: () => this.handleSearch(selectedKeys, confirm, dataIndex),\n        icon: \"search\",\n        size: \"small\",\n        style: {\n          width: 90,\n          marginRight: 8\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210\n        },\n        __self: this\n      }, \"Search\"), React.createElement(Button, {\n        onClick: () => this.handleReset(clearFilters),\n        size: \"small\",\n        style: {\n          width: 90\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219\n        },\n        __self: this\n      }, \"Reset\")),\n      filterIcon: filtered => React.createElement(Icon, {\n        type: \"search\",\n        style: {\n          color: filtered ? '#1890ff' : undefined\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225\n        },\n        __self: this\n      }),\n      onFilter: (value, record) => record[dataIndex].toString().toLowerCase().includes(value.toLowerCase()),\n      onFilterDropdownVisibleChange: visible => {\n        if (visible) {\n          setTimeout(() => this.searchInput.select());\n        }\n      },\n      render: text => this.state.searchedColumn === dataIndex ? React.createElement(Highlighter, {\n        highlightStyle: {\n          backgroundColor: '#ffc069',\n          padding: 0\n        },\n        searchWords: [this.state.searchText],\n        autoEscape: true,\n        textToHighlight: text.toString(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239\n        },\n        __self: this\n      }) : text\n    });\n\n    this.handleSearch = (selectedKeys, confirm, dataIndex) => {\n      confirm();\n      this.setState({\n        searchText: selectedKeys[0],\n        searchedColumn: dataIndex\n      });\n    };\n\n    this.handleReset = clearFilters => {\n      clearFilters();\n      this.setState({\n        searchText: ''\n      });\n    };\n\n    this.handleSearch = (selectedKeys, confirm, dataIndex) => {\n      confirm();\n      this.setState({\n        searchText: selectedKeys[0],\n        searchedColumn: dataIndex\n      });\n    };\n\n    this.handleReset = clearFilters => {\n      clearFilters();\n      this.setState({\n        searchText: ''\n      });\n    };\n\n    this.columns = [_objectSpread({\n      title: 'who',\n      dataIndex: 'who',\n      editable: true\n    }, this.getColumnSearchProps('who')), _objectSpread({\n      title: 'desc',\n      dataIndex: 'desc',\n      width: '30%',\n      ellipsis: true\n    }, this.getColumnSearchProps('desc')), _objectSpread({\n      title: 'type',\n      dataIndex: 'type'\n    }, this.getColumnSearchProps('type')), _objectSpread({\n      title: 'url',\n      dataIndex: 'url',\n      render: text => React.createElement(\"a\", {\n        href: text,\n        target: \"_blank\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, text)\n    }, this.getColumnSearchProps('url')), _objectSpread({\n      title: 'source',\n      dataIndex: 'source'\n    }, this.getColumnSearchProps('source')), {\n      title: 'operation',\n      dataIndex: 'operation',\n      render: (text, record) => this.state.dataSource.length >= 1 ? React.createElement(Popconfirm, {\n        title: \"Sure to delete?\",\n        onConfirm: () => this.handleDelete(record._id),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }, \"Delete\")) : null\n    }];\n    this.state = {\n      dataSource: null,\n      count: 2,\n      error: null\n    };\n  }\n\n  changeData(result) {\n    console.log(result);\n    let arr = [];\n    const data = result.results;\n\n    for (let k in data) {\n      arr.push(data[k]);\n    }\n\n    let arr2 = [].concat.apply([], arr);\n    console.log(arr2);\n    this.setState({\n      dataSource: arr2\n    });\n  }\n\n  componentDidMount() {\n    fetch('http://gank.io/api/today').then(result => result.json()).then(result => this.changeData(result)).catch(e => this.setState({\n      error: e\n    }));\n  }\n\n  render() {\n    const _this$state2 = this.state,\n          dataSource = _this$state2.dataSource,\n          error = _this$state2.error;\n    const components = {\n      body: {\n        row: EditableFormRow,\n        cell: EditableCell\n      }\n    };\n    const columns = this.columns.map(col => {\n      if (!col.editable) {\n        return col;\n      }\n\n      return _objectSpread({}, col, {\n        onCell: record => ({\n          record,\n          editable: col.editable,\n          dataIndex: col.dataIndex,\n          title: col.title,\n          handleSave: this.handleSave\n        })\n      });\n    });\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300\n      },\n      __self: this\n    }, dataSource ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302\n      },\n      __self: this\n    }, React.createElement(Button, {\n      onClick: this.handleAdd,\n      type: \"primary\",\n      style: {\n        marginBottom: 16\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303\n      },\n      __self: this\n    }, \"Add a row\"), React.createElement(Table, {\n      components: components,\n      rowClassName: () => 'editable-row',\n      bordered: true,\n      dataSource: dataSource,\n      columns: columns,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306\n      },\n      __self: this\n    })) : React.createElement(Spin, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314\n      },\n      __self: this\n    }));\n  }\n\n}\n\nclass Mytable extends React.Component {\n  render() {\n    return React.createElement(EditableTable, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default Mytable;","map":{"version":3,"sources":["/home/grace/test/my-app/src/table.js"],"names":["React","Spin","Table","Input","Button","Popconfirm","Form","Icon","Highlighter","EditableContext","createContext","EditableRow","form","index","props","EditableFormRow","create","EditableCell","Component","state","editing","toggleEdit","setState","input","focus","save","e","record","handleSave","validateFields","error","values","currentTarget","id","renderCell","children","dataIndex","title","margin","getFieldDecorator","rules","required","message","initialValue","node","paddingRight","render","editable","restProps","EditableTable","constructor","handleDelete","_id","dataSource","filter","item","handleAdd","count","timestamp","Date","valueOf","newData","key","who","desc","type","url","source","row","findIndex","splice","getColumnSearchProps","filterDropdown","setSelectedKeys","selectedKeys","confirm","clearFilters","padding","searchInput","target","value","handleSearch","width","marginBottom","display","marginRight","handleReset","filterIcon","filtered","color","undefined","onFilter","toString","toLowerCase","includes","onFilterDropdownVisibleChange","visible","setTimeout","select","text","searchedColumn","backgroundColor","searchText","columns","ellipsis","length","changeData","result","console","log","arr","data","results","k","push","arr2","concat","apply","componentDidMount","fetch","then","json","catch","components","body","cell","map","col","onCell","Mytable"],"mappings":"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","sourcesContent":["import React from 'react';\nimport 'antd/dist/antd.css';\nimport { Spin } from 'antd';\n\nimport { Table, Input, Button, Popconfirm, Form ,Icon } from 'antd';\nimport Highlighter from \"react-highlight-words\";\n\nconst EditableContext = React.createContext();\n\nconst EditableRow = ({ form, index, ...props }) => (\n  <EditableContext.Provider value={form}>\n    <tr {...props} />\n  </EditableContext.Provider>\n);\n\nconst EditableFormRow = Form.create()(EditableRow);\n\nclass EditableCell extends React.Component {\n  state = {\n    editing: false,\n  };\n\n  toggleEdit = () => {\n    const editing = !this.state.editing;\n    this.setState({ editing }, () => {\n      if (editing) {\n        this.input.focus();\n      }\n    });\n  };\n\n  save = e => {\n    const { record, handleSave } = this.props;\n    this.form.validateFields((error, values) => {\n      if (error && error[e.currentTarget.id]) {\n        return;\n      }\n      this.toggleEdit();\n      handleSave({ ...record, ...values });\n    });\n  };\n\n  renderCell = form => {\n    this.form = form;\n    const { children, dataIndex, record, title } = this.props;\n    const { editing } = this.state;\n    return editing ? (\n      <Form.Item style={{ margin: 0 }}>\n        {form.getFieldDecorator(dataIndex, {\n          rules: [\n            {\n              required: true,\n              message: `${title} is required.`,\n            },\n          ],\n          initialValue: record[dataIndex],\n        })(<Input ref={node => (this.input = node)} onPressEnter={this.save} onBlur={this.save} />)}\n      </Form.Item>\n    ) : (\n      <div\n        className=\"editable-cell-value-wrap\"\n        style={{ paddingRight: 24 }}\n        onClick={this.toggleEdit}\n      >\n        {children}\n      </div>\n    );\n  };\n\n  render() {\n    const {\n      editable,\n      dataIndex,\n      title,\n      record,\n      index,\n      handleSave,\n      children,\n      ...restProps\n    } = this.props;\n    return (\n      <td {...restProps}>\n        {editable ? (\n          <EditableContext.Consumer>{this.renderCell}</EditableContext.Consumer>\n        ) : (\n          children\n        )}\n      </td>\n    );\n  }\n}\n\nclass EditableTable extends React.Component {\n  constructor(props) {\n    super(props);\n    this.columns = [\n      {\n        title: 'who',\n        dataIndex: 'who',\n        editable: true,\n        ...this.getColumnSearchProps('who'),\n      },\n      {\n        title:'desc',\n        dataIndex:'desc',\n        width:'30%',\n        ellipsis: true,\n        ...this.getColumnSearchProps('desc'),\n      },\n      {\n        title: 'type',\n        dataIndex: 'type',\n        ...this.getColumnSearchProps('type'),\n      },\n      {\n        title:'url',\n        dataIndex:'url',\n        render: text => <a href={text} target=\"_blank\">{text}</a>,\n        ...this.getColumnSearchProps('url'),\n      },\n      {\n        title: 'source',\n        dataIndex: 'source',\n        ...this.getColumnSearchProps('source'),\n\n      },\n      {\n        title: 'operation',\n        dataIndex: 'operation',\n        render: (text, record) =>\n          this.state.dataSource.length >= 1 ? (\n            <Popconfirm title=\"Sure to delete?\" onConfirm={() => this.handleDelete(record._id)}>\n              <a>Delete</a>\n            </Popconfirm>\n          ) : null,\n      },\n    ];\n\n    this.state = {\n      dataSource: null,\n      count: 2,\n      error:null,\n    };\n  }\n  \n  changeData(result){\n    console.log(result)\n    let arr = []\n    const data = result.results\n    for(let k in data){\n       arr.push(data[k])\n    }\n    let arr2 = [].concat.apply([], arr);\n    console.log(arr2)\n    this.setState ({dataSource :arr2})\n    }\n  componentDidMount(){\n  fetch('http://gank.io/api/today')\n    .then(result => result.json())\n    .then(result => this.changeData(result))\n    .catch(e => this.setState({ error: e }));\n  }\n\n  handleDelete = _id => {\n    const dataSource = [...this.state.dataSource];\n    this.setState({ dataSource: dataSource.filter(item => item._id !== _id) });\n  };\n\n  handleAdd = () => {\n    const { count, dataSource } = this.state;\n    const timestamp = (new Date()).valueOf();\n    const newData = {\n      key: count,\n      _id: timestamp,\n      who: `defaultName ${count}`,\n      desc: 'defaultDesc',\n      type: `defalutType ${count}`,\n      url:'defaultUrl', \n      source:'defaultSource',\n    };\n    this.setState({\n      dataSource: [...dataSource, newData],\n      count: count + 1,\n    });\n  };\n\n  handleSave = row => {\n    const newData = [...this.state.dataSource];\n    const index = newData.findIndex(item => row.key === item.key);\n    const item = newData[index];\n    newData.splice(index, 1, {\n      ...item,\n      ...row,\n    });\n    this.setState({ dataSource: newData });\n  };\n  getColumnSearchProps = dataIndex => ({\n    filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }) => (\n      <div style={{ padding: 8 }}>\n        <Input\n          ref={node => {\n            this.searchInput = node;\n          }}\n          placeholder={`Search ${dataIndex}`}\n          value={selectedKeys[0]}\n          onChange={e => setSelectedKeys(e.target.value ? [e.target.value] : [])}\n          onPressEnter={() => this.handleSearch(selectedKeys, confirm, dataIndex)}\n          style={{ width: 188, marginBottom: 8, display: 'block' }}\n        />\n        <Button\n          type=\"primary\"\n          onClick={() => this.handleSearch(selectedKeys, confirm, dataIndex)}\n          icon=\"search\"\n          size=\"small\"\n          style={{ width: 90, marginRight: 8 }}\n        >\n          Search\n        </Button>\n        <Button onClick={() => this.handleReset(clearFilters)} size=\"small\" style={{ width: 90 }}>\n          Reset\n        </Button>\n      </div>\n    ),\n    filterIcon: filtered => (\n      <Icon type=\"search\" style={{ color: filtered ? '#1890ff' : undefined }} />\n    ),\n    onFilter: (value, record) =>\n      record[dataIndex]\n        .toString()\n        .toLowerCase()\n        .includes(value.toLowerCase()),\n    onFilterDropdownVisibleChange: visible => {\n      if (visible) {\n        setTimeout(() => this.searchInput.select());\n      }\n    },\n    render: text => (\n    (this.state.searchedColumn === dataIndex) ?\n      <Highlighter\n        highlightStyle={{ backgroundColor: '#ffc069', padding: 0 }}\n        searchWords={[this.state.searchText]}\n        autoEscape\n        textToHighlight={text.toString()}\n      />\n      : text\n    ),\n  });\n\n  handleSearch = (selectedKeys, confirm, dataIndex) => {\n    confirm();\n    this.setState({ \n      searchText: selectedKeys[0],\n      searchedColumn: dataIndex,\n      });\n  };\n\n  handleReset = clearFilters => {\n    clearFilters();\n    this.setState({ searchText: '' });\n  };\n  handleSearch = (selectedKeys, confirm, dataIndex) => {\n    confirm();\n    this.setState({ \n      searchText: selectedKeys[0],\n      searchedColumn: dataIndex,\n      });\n  };\n\n  handleReset = clearFilters => {\n    clearFilters();\n    this.setState({ searchText: '' });\n  };\n  \n  render() {\n    const { dataSource ,error } = this.state;\n    const components = {\n      body: {\n        row: EditableFormRow,\n        cell: EditableCell,\n      },\n    };\n    const columns = this.columns.map(col => {\n      if (!col.editable) {\n        return col;\n      }\n      return {\n        ...col,\n        onCell: record => ({\n          record,\n          editable: col.editable,\n          dataIndex: col.dataIndex,\n          title: col.title,\n          handleSave: this.handleSave,\n        }),\n      };\n    });\n\n    \n    return (\n      <div>\n        {dataSource\n        ? <div> \n        <Button onClick={this.handleAdd} type=\"primary\" style={{ marginBottom: 16 }}>\n          Add a row\n        </Button>\n        <Table\n          components={components}\n          rowClassName={() => 'editable-row'}\n          bordered\n          dataSource={dataSource}\n          columns={columns}\n        />\n        </div>\n        : <Spin />}\n      </div>\n    );\n  }\n}\n\nclass Mytable extends React.Component{\n  render(){\n    return( \n    <EditableTable />\n    )\n  }\n}\n\nexport default Mytable"]},"metadata":{},"sourceType":"module"}